external function string 255 ConvertXmlString(string,Boolean);
external function boolean ValidateIBAN(string);
external procedure StripSpace(var string,string);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure NewLineExport();
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);

procedure RemNonString(var string tstr)
begin
  string 255 tstr2;
  integer i,l;
  l = len(tstr);
  tstr2 = "";
  for (i =0; i < l; i = I + 1) begin
    if (mid(tstr,i,1) >= "0" and mid(tstr,i,1) <= "9") then begin
      tstr2 = tstr2 & mid(tstr,i,1);
    end;
  end;
  tstr  = tstr2;
return;
end;

function val SettlementDisocunt(record OPVc OPr,LongInt VISerNr)
begin
  val res;
  Integer i,rwcnt;
  row OPVc OPrw;
  
  rwcnt = MatRowCnt(OPr);  
  for (i = 0; i<rwcnt; i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    if (OPrw.ovst==0) then begin
      if (OPrw.stp==5) then begin
      if (OPrw.VISerNr==VISerNr) then begin
        res = res + OPrw.BankVal;
      end;
      end;
    end;
  end;
  SettlementDisocunt = res;
  return;
end;

 procedure DupQuatMarks( string s, var string s2 )
 begin
   String 255 b;
   String 255 quatM;
   Integer i;
   s2 = "";
   quatM = "\"";
   for (i=0; i<=Len(s); i=i+1) begin
      b = MID(s,i,1);
      s2 = s2 & b;
      if (b==quatM) then begin
        s2 = s2 & quatM;
      end;
    end;
   return;
 end;

function integer strlen(string str)
begin
  integer sk,l,i;
  sk = len(str);
  l = len(str);
  for (i=0;i<=l;i=i+1) begin
  //messagebox(0,Mid(str,i,1)&" "&);
    if ((Mid(str,i,1)=="ä") or (Mid(str,i,1)=="ì") or (Mid(str,i,1)=="˜") or (Mid(str,i,1)=="°") or (Mid(str,i,1)=="ˆ") or (Mid(str,i,1)=="ð") or (Mid(str,i,1)=="‹") or (Mid(str,i,1)=="«") or (Mid(str,i,1)=="÷") or
	(Mid(str,i,1)==UpperCase("ä")) or (Mid(str,i,1)==UpperCase("ì")) or (Mid(str,i,1)==UpperCase("˜")) or (Mid(str,i,1)==UpperCase("°")) or (Mid(str,i,1)==UpperCase("ˆ")) or (Mid(str,i,1)==UpperCase("ð")) or (Mid(str,i,1)==UpperCase("‹")) or (Mid(str,i,1)==UpperCase("«")) or (Mid(str,i,1)==UpperCase("÷")))then begin
      sk=sk+1;
    end;
  end;
  strlen = sk;
  return;
end;

/////
/*
 procedure RemoveMarks( string s, var string s2 )
 begin
   String 255 b;
   String 255 quatM;
   Integer i;

   s2 = "";
   quatM = """;
   for (i=0; i<=Len(s); i=i+1) begin
      b = MID(s,i,1);
      if (b==quatM) then begin
//        s2 = s2 & quatM;
      end else begin
        s2 = s2 & b;
      end;
    end;
   return;
 end;
/////
*/
procedure ExportTheLevel(Integer level)
begin
  string 255 tstr;
  Integer i;
  
  tstr = "";
  for (i=0;i<level;i=i+1) begin
    tstr = tstr & "  ";
  end;
  ExportPadString(tstr,len(tstr)," ",false);
  return;
end;

procedure ExportPlainXml(string value,Integer level)
begin
  ExportTheLevel(level);
  ExportPadString(value,BytesInString(value)," ",false);
  NewLineExport;
  return;
end;

procedure ExportTagXml(string tag,string pvalue,Integer level)
begin
  string 255 value;
  
  value = pvalue;
  ExportTheLevel(level);
  ExportPadString("<",1," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);  
  ExportPadString(value,BytesInString(value)," ",false);
  ExportPadString("</",2," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);
  NewLineExport;
  return;
end;

procedure ExportAttributeTagXml(string tag,string pvalue,string attr,string attrvalue,Integer level)
begin
  string 255 value;
  
  value = pvalue;
  ExportTheLevel(level);
  ExportPadString("<",1," ",false);
  ExportPadString(tag,len(tag)," ",false);
  if (nonblank(attr)) then begin
    ExportPadString(" ",1," ",false);
    ExportPadString(attr,len(attr)," ",false);
    ExportPadString("=""",2," ",false);
    ExportPadString(attrvalue,BytesInString(attrvalue)," ",false);
    ExportPadString("""",1," ",false);
  end;
  ExportPadString(">",1," ",false);  
  ExportPadString(value,BytesInString(value)," ",false);
  ExportPadString("</",2," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);
  NewLineExport;
  return;
end;

///????????
procedure AddToPerSupplierArray(Integer ExportSuppInvNr,row OPVc OPrw,string bankacc,Array Integer aprcnt,Array string aprvecode,Array string aprbankacc,Array string aprreference,Array string aprbankcur,Array val aprbankval,
                                Array string aprreccur,Array val aprrecval,Array string aprreferencedetails,Array string aprbankvaldetails,Array string aprinvoicetypes,var Integer acnt)
begin
  Integer i;
  record VIVc VIr;
  string 255 BankRefStr;

  VIr.SerNr = OPrw.VISerNr;
  ReadFirstMain(VIr,1,true);
  
  for (i=0;i<acnt;i=i+1) begin
    if (aprcnt[i]<9) and (aprvecode[i]==OPrw.VECode) and (aprbankacc[i]==bankacc) then begin
      aprcnt[i] = aprcnt[i] + 1;
      aprbankval[i] = aprbankval[i] + OPrw.BankVal;
/*      
      if (OPrw.BankVal<0) then begin
        aprbankvaldetails[i] = aprbankvaldetails[i] & ";" & ValToString(-OPrw.BankVal,M4Val,"",".",0);
      end else begin
        aprbankvaldetails[i] = aprbankvaldetails[i] & ";" & ValToString(OPrw.BankVal,M4Val,"",".",0);
      end;
*/      
      aprrecval[i] = aprrecval[i] + OPrw.RecVal;
      if (OPrw.RecVal<0) then begin
        aprbankvaldetails[i] = aprbankvaldetails[i] & ";" & ValToString(-OPrw.RecVal,M4Val,"",".",0);
      end else begin
        aprbankvaldetails[i] = aprbankvaldetails[i] & ";" & ValToString(OPrw.RecVal,M4Val,"",".",0);
      end;
      switch (VIr.InvType) begin
        case kInvoiceTypeCredit:
          aprinvoicetypes[i] = aprinvoicetypes[i] & ";" & "CREN";
        case kInvoiceTypeCreditSpecialSales:
          aprinvoicetypes[i] = aprinvoicetypes[i] & ";" & "CREN";
        otherwise
          aprinvoicetypes[i] = aprinvoicetypes[i] & ";" & "CINV";
      end;
      if (blank(OPrw.BankRefStr) and ExportSuppInvNr==0) then begin
        aprreference[i] = aprreference[i] & "/" & "TRANSFER";
        aprreferencedetails[i] = aprreferencedetails[i] & ";" & "TRANSFER";
      end else begin
        BankRefStr = OPrw.BankRefStr;
        if (blank(BankRefStr)) then begin BankRefStr = VIr.RefStr; end;
        if (ExportSuppInvNr!=0) then begin
          if (blank(BankRefStr)) then begin BankRefStr = VIr.InvoiceNr; end;
        end;
        aprreference[i] = aprreference[i] & "/" & BankRefStr;
        aprreferencedetails[i] = aprreferencedetails[i] & ";" & BankRefStr;
      end;
      goto LAddToPerSupplierArray;
    end;
  end;
  aprcnt[acnt] = 1;
  aprvecode[acnt] = OPrw.VECode;
  aprbankacc[acnt] = bankacc;
  aprbankcur[acnt] = OPrw.BankCurncy;
  aprbankval[acnt] = OPrw.BankVal;
/*  
  if (OPrw.BankVal<0) then begin
    aprbankvaldetails[acnt] = ValToString(-OPrw.BankVal,M4Val,"",".",0);
  end else begin
    aprbankvaldetails[acnt] = ValToString(OPrw.BankVal,M4Val,"",".",0);
  end;
*/
  aprreccur[acnt] = OPrw.RecCurncy;
  aprrecval[acnt] = OPrw.RecVal;
  if (OPrw.BankVal<0) then begin
    aprbankvaldetails[acnt] = ValToString(-OPrw.RecVal,M4Val,"",".",0);
  end else begin
    aprbankvaldetails[acnt] = ValToString(OPrw.RecVal,M4Val,"",".",0);
  end;
  switch (VIr.InvType) begin
    case kInvoiceTypeCredit:
      aprinvoicetypes[i] = "CREN";
    case kInvoiceTypeCreditSpecialSales:
      aprinvoicetypes[i] = "CREN";
    otherwise
      aprinvoicetypes[i] = "CINV";
  end;
  if (blank(OPrw.BankRefStr) and ExportSuppInvNr==0) then begin
    aprreference[acnt] = "/" & "TRANSFER";
    aprreferencedetails[acnt] = "TRANSFER";
  end else begin
    BankRefStr = OPrw.BankRefStr;
    if (blank(BankRefStr)) then begin BankRefStr = VIr.RefStr; end;
    if (ExportSuppInvNr!=0) then begin
      if (blank(BankRefStr)) then begin BankRefStr = VIr.InvoiceNr; end;
    end;
    aprreference[acnt] = "/" & BankRefStr;
    aprreferencedetails[acnt] = BankRefStr;
  end;
  acnt = acnt + 1;
LAddToPerSupplierArray:;  
  return;
end;

global
procedure BankExpLitSEPA_Domestic_GroupHeader(record RcVc RepSpec,var record BankFileBlock bfr)
begin
  string 255 tstr;
  LongInt appsernr;
  record CYBlock CYb;
  record OPVc OPr;
  Boolean found,testf;
  Integer keys;
  string 255 ckey;
  LongInt afr,ato;
  Integer i,rwcnt;
  row OPVc OPrw;
  record BaseCurBlock BCb;  
  Integer NbOfTxs;
  record CUVc VEr;
  string 255 bankacc;
  Array string 255 aprvecode;
  Array string 255 aprbankacc;
  Array string 255 aprreference;
  Array string 255 aprbankcur;
  Array string 255 aprreccur;
  Array Integer aprcnt;
  Array val aprbankval;
  Array val aprrecval;
  Array string 255 aprreferencedetails;
  Array string 255 aprinvoicetypes;
  Array string 255 aprbankvaldetails;
  Integer prevacnt,acnt;
  string 255 timestamp;
  time curtime;
  string 255 codepage;
///
  record BankVc Bankr;
  row PMBlock PMrw;
  val allsum,onesum;
  string 255 banksw;
///
  
  codepage = StringSetFromString(89,RepSpec.f12);
  if (blank(codepage)) then begin
    codepage = "UTF-8";
  end;
  NbOfTxs = 0;
  allsum = 0;
  BlockLoad(CYb);
  BlockLoad(BCb);
  appsernr = bfr.LastSerNr;
  if (appsernr<=0) or (appsernr>999999) then begin
    appsernr = 1;
  end;

  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  found = true;
  if (RepSpec.OnlyUnprntd==0) then begin
    OPr.SentFlag = 0;
    OPr.SerNr = afr;
    keys = 2;
    ckey = "SentFlag";
  end else begin
    OPr.SerNr = afr;
    keys = 1;
    ckey = "SerNr";
  end;
  while (LoopKey(ckey,OPr,keys,found)) begin
    if (RepSpec.OnlyUnprntd==0) then begin
      if (OPr.SentFlag==1) then begin
        found = false;
      end;
    end;
    if (ato<>-1) then begin
      if (OPr.SerNr>ato) then begin
        found = false;
      end;
    end;
    testf = true;
    if (RepSpec.OnlyUnprntd==0) then begin
      if (OPr.DoneFlag==1) then begin 
        testf = false;
      end;
    end;
    if (OPr.OrderedFlag==0) then begin 
      testf = false;
    end;
    if (DateInRange(OPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      testf = false;
    end;    
    if (found==false) then begin
      testf = false;
    end;
    if (testf==true) then begin
              NbOfTxs = NbOfTxs + 1;
	      allsum = allsum + OPr.CurPayVal;
	      GetPMRow(OPr.PayMode,PMrw);
	      Bankr.Code = PMrw.BankCode;
	      ReadFirstMain(Bankr,1,true);

	    for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(OPr,i,OPrw);
              If (OPrw.ovst!=0) or (OPrw.stp!=1) Then Begin
                goto LBankExpLitSEPA_Domestic_GroupHeader_SKIPROW1;
              end;
              VEr.Code = OPrw.VECode;
              ReadFirstMain(VEr,1,true);

              bankacc = OPrw.BankAcc;
              if (blank(bankacc)) then begin
                bankacc = VEr.IBANCode;
              end;
              if (blank(bankacc)) then begin
                bankacc = VEr.BankAccount;
              end;
              if (blank(bankacc)) then begin
                bankacc = VEr.Bank;
              end;
              prevacnt = acnt;
              AddToPerSupplierArray(bfr.ExportSuppInvNr,OPrw,bankacc,aprcnt,aprvecode,aprbankacc,aprreference,aprbankcur,aprbankval,aprreccur,aprrecval,aprreferencedetails,aprbankvaldetails,aprinvoicetypes,acnt);
LBankExpLitSEPA_Domestic_GroupHeader_SKIPROW1:;              
            end; // for
    end; // if testf
  end;// while

  ExportPlainXml("<?xml version=""1.0"" encoding=""" & codepage & """?>",0); 
// RMS 15.12.15
// pvz.Sepa2          <Document xmlns="urn:iso:std:iso:20022:tech:xsd:pain.001.001.03" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:iso:std:iso:20022:tech:xsd:pain.001.001.03 pain.001.001.03.xsd"> 
  tstr = "<Document xmlns=""urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""urn:iso:std:iso:20022:tech:xsd:pain.001.001.03 pain.001.001.03.xsd"">";

//  tstr = "<Document xmlns=""urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"">";
//  tstr = "<Document xmlns=""urn:iso:std:iso:20022:tech:xsd:pain.001.001.02"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""urn:iso:std:iso:20022:tech:xsd:pain.001.001.02";
  ExportPlainXml(tstr,0); 
  tstr = "<CstmrCdtTrfInitn>";
  ExportPlainXml(tstr,0); 
//  tstr = "<pain.001.001.02.xsd"">";
//  ExportPlainXml("<pain.001.001.03>",0);
//  ExportPlainXml("<pain.001.001.02>",0);
// RMS
  ExportPlainXml("<GrpHdr>",1);
  curtime = CurrentTime;
  timestamp = DateToString(CurrentDate,"YYMMDD") & GetHour(curtime) & GetMinute(curtime);
  ExportTagXml("MsgId",appsernr & "-" & timestamp,2);
  tstr = DateToString(CurrentDate,"YYYY-MM-DD");
  tstr = tstr & "T";
  tstr = tstr & CurrentTime;
  ExportTagXml("CreDtTm",tstr,2);
  ExportTagXml("NbOfTxs",NbOfTxs,2);
/// INTERE
  ExportTagXml("CtrlSum",ValToString(allsum,M4Val,"",".",0),2);
/// INTERE
//  ExportTagXml("Grpg","MIXD",2);
  ExportPlainXml("<InitgPty>",2);
  ExportTagXml("Nm",ConvertXmlString(CYb.CompName,false),3);
/// 16.01.19
  ExportPlainXml("<Id>",3);
  ExportPlainXml("<OrgId>",4);
  ExportPlainXml("<Othr>",5);
  ExportTagXml("Id",ConvertXmlString(CYb.OrgNr,false),6);
  ExportPlainXml("<SchmeNm>",6);
  ExportTagXml("Cd","COID",7);
  ExportPlainXml("</SchmeNm>",6);
  ExportPlainXml("</Othr>",5);
  ExportPlainXml("</OrgId>",4);
  ExportPlainXml("</Id>",3);
/// end 16.01.19
  ExportPlainXml("</InitgPty>",2);
  ExportPlainXml("</GrpHdr>",1);
  bfr.LastSerNr = appsernr + 1;
  return;
end;

global
procedure BankExpLitSEPA_Domestic_GroupFooter()
begin
  string 255 tstr;
// RMS 15.12.15
  ExportPlainXml("</CstmrCdtTrfInitn>",0);
//  ExportPlainXml("</pain.001.001.03>",0);
// RMS 15.12.15
  ExportPlainXml("</Document>",0);
  return;
end;

procedure BankExpLitSEPA_Domestic_Header(record RcVc RepSpec,record OPVc OPr,record BankFileBlock bfr)
begin
  string 255 tstr,banksw;
  LongInt rowsernr;
  record CYBlock CYb;
  record BankVc Bankr;
  row PMBlock PMrw;
  string 255 cur,paymeth;
  integer i,rwcnt;

////
  record AccVc Accr;
/////  
  BlockLoad(CYb);
  rowsernr = bfr.RowSerNr;
  if (rowsernr<=0) or (rowsernr>999999) then begin
    rowsernr = 1;
  end;
  ExportPlainXml("<PmtInf>",1);
  ExportTagXml("PmtInfId",rowsernr,2);
  ExportTagXml("PmtMtd","TRF",2);
/// RMS SEB priima tik FALSE!!!
    ExportTagXml("BtchBookg","false",3);
  ExportTagXml("NbOfTxs",1,2);
  ExportTagXml("CtrlSum",ValToString(OPr.CurPayVal,M4Val,"",".",0),2);
//// INTERE
  ExportPlainXml("<PmtTpInf>",2);
  ExportPlainXml("<SvcLvl>",3);
    ExportTagXml("Cd","SEPA",4);

/*
  if (OPr.PayMethod)== 0 then begin
    ExportTagXml("Cd","NURG",4);
  end; // if
  if (OPr.PayMethod)== 1 then begin
    ExportTagXml("Cd","URGP",4);
  end; // if
   if (OPr.PayMethod)== 2 then begin
    ExportTagXml("Cd","SDVA",4);
  end; // if
*/
/////
  ExportPlainXml("</SvcLvl>",3);
  ExportPlainXml("</PmtTpInf>",2);
  ExportTagXml("ReqdExctnDt",DateToString(OPr.PayDate,"YYYY-MM-DD"),2);
  ExportPlainXml("<Dbtr>",2);
  ExportTagXml("Nm",ConvertXmlString(CYb.CompName,false),3);
/*
///++++ INTERE!!!
  if nonblank(CYb.CountryCode) then begin
    ExportPlainXml("<PstlAdr>",3);
    ExportTagXml("Ctry",CYb.CountryCode,4);
    if nonblank(CYb.Addr0) then begin
      ExportTagXml("AdrLine",ConvertXmlString(CYb.Addr0,false),4);
    end; // if
    if nonblank(CYb.Addr1) then begin
      ExportTagXml("AdrLine",ConvertXmlString(CYb.Addr1,false),4);
    end; // if
    ExportPlainXml("</PstlAdr>",3);
  end; // if
*/
/// 16.01.19
  ExportPlainXml("<Id>",3);
  ExportPlainXml("<OrgId>",4);
  ExportPlainXml("<Othr>",5);
  ExportTagXml("Id",ConvertXmlString(CYb.OrgNr,false),6);
  ExportPlainXml("<SchmeNm>",6);
  ExportTagXml("Cd","COID",7);
  ExportPlainXml("</SchmeNm>",6);
  ExportPlainXml("</Othr>",5);
  ExportPlainXml("</OrgId>",4);
  ExportPlainXml("</Id>",3);
/// end 16.01.19
  ExportPlainXml("</Dbtr>",2);

  GetPMRow(OPr.PayMode,PMrw);
  Bankr.Code = PMrw.BankCode;
  ReadFirstMain(Bankr,1,true);
  ExportPlainXml("<DbtrAcct>",2);
  ExportPlainXml("<Id>",3);
  StripSpace(tstr,PMrw.BankNr);// is mok. budo!!!
  ExportTagXml("IBAN",tstr,4);  
  ExportPlainXml("</Id>",3);    
/// INTERE
  Accr.AccNumber = PMrw.AccNr;
  ReadFirstMain(Accr,1,true);
  if blank(Accr.Curncy)
 then begin
    cur = "EUR";
  end else begin
    cur = Accr.Curncy;
  end;; // if
  
  ExportTagXml("Ccy",cur,3);// is buh. sask korteles!!!!
/// INTERE
  ExportPlainXml("</DbtrAcct>",2);
  ExportPlainXml("<DbtrAgt>",2);
  ExportPlainXml("<FinInstnId>",3);
///
	if strlen(Bankr.SWIFT)< 11 then begin
	  banksw = Bankr.SWIFT;
	  rwcnt = (11 - strlen(Bankr.SWIFT));
	  for (i=0;i<rwcnt ;i=i+1 ) begin
	    banksw = banksw & "X";
	  end; // for
	  
	end else begin
	 banksw = Bankr.SWIFT;
	end; // if
	
///
//logtext(0,"Dbtr-banksw = " & banksw);
//	ExportTagXml("BIC",Bankr.SWIFT,4);  
	ExportTagXml("BIC",banksw,4);  

//  ExportTagXml("BIC",Bankr.SWIFT,4);  
  ExportPlainXml("</FinInstnId>",3);
  ExportPlainXml("</DbtrAgt>",2);
//// INTERE - ka imti - iki 585?????
// LAIKINAI tikrinu!!!!!
  bfr.RowSerNr = rowsernr + 1;
  return;
end;

procedure BankExpLitSEPA_Domestic_Footer()
begin
  string 255 tstr;

  ExportPlainXml("</PmtInf>",1);
  return;
end;

global
procedure BankExpLitSEPA_Domestic(record RcVc RepSpec,record OPVc OPr,Integer today,String curnc,integer method,record BankFileBlock bfr)
begin
  string 255 tstr,rtst;
  Integer i,j,rwcnt;
  row OPVc OPrw;
  row OPVc OP2rw;
  record CUVc VEr;
  record BankVc Bankr;
  record BankVc ourBankr;
  record VIVc VIr;
  record BaseCurBlock BCb;
  row PMBlock PMrw;
  string 255 bankacc;
  Array string 255 aprvecode;
  Array string 255 aprbankacc;
  Array string 255 aprreference;
  Array string 255 aprreccur;
  Array string 255 aprbankcur;
  Array Integer aprcnt;
  Array val aprbankval;
  Array val aprrecval;
  Array string 255 aprreferencedetails;
  Array string 255 aprinvoicetypes;
  Array string 255 aprbankvaldetails;
  Integer acnt;
  Integer pos1,pos2,pos3;
  string 255 bvdet,brdet,invtype,banksw;
//  record CYBlock CYb;
  
//  BlockLoad(CYb);
  BankExpLitSEPA_Domestic_Header(RepSpec,OPr,bfr);
  BlockLoad(BCb);
  rwcnt = MatRowCnt(OPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      If (OPrw.ovst!=0) or (OPrw.stp!=1) Then Begin
        goto LBankExpLitSEPA_Domestic_SKIPROW1;
      end;
      VEr.Code = OPrw.VECode;
      ReadFirstMain(VEr,1,true);

      bankacc = OPrw.BankAcc;
      if (blank(bankacc)) then begin
        bankacc = VEr.IBANCode;
      end;
      if (blank(bankacc)) then begin
        bankacc = VEr.BankAccount;
      end;
      if (blank(bankacc)) then begin
        bankacc = VEr.Bank;
      end;
//// turim VE ir bankaccount
        i = rwcnt;
	goto LBankExpLitSEPA_Domestic_SKIPROW1;
////
      AddToPerSupplierArray(bfr.ExportSuppInvNr,OPrw,bankacc,aprcnt,aprvecode,aprbankacc,aprreference,aprbankcur,aprbankval,aprreccur,aprrecval,aprreferencedetails,aprbankvaldetails,aprinvoicetypes,acnt);      
LBankExpLitSEPA_Domestic_SKIPROW1:;
    end;//for
///++++ bankaccount turim
      ReadFirstMain(VEr,1,true);
      Bankr.Code = VEr.AccOperator;
      if (ReadFirstMain(Bankr,1,true)==false) then begin
        Bankr.Code = PMrw.BankCode;
        GetPMRow(OPr.PayMode,PMrw);
      end;
//      ourBankr.Code = CYb.AccOperator;
//      ReadFirstMain(ourBankr,1,true);

// keiciu i 1 lygi
      ExportPlainXml("<CdtTrfTxInf>",1);
      ExportPlainXml("<PmtId>",2);    
//// Inter
//      ExportTagXml("InstrId",,3);  // kas cia turi buti????
/// INTER
//      ExportTagXml("EndToEndId",OPr.SerNr & "-" & i+1,3);  
      ExportTagXml("EndToEndId",OPr.SerNr,3);  
      ExportPlainXml("</PmtId>",2);
      ExportPlainXml("<Amt>",2);
      ExportAttributeTagXml("InstdAmt",ValToString(OPr.CurPayVal,M4Val,"",".",0),"Ccy",OPr.PayCurCode,3);

      ExportPlainXml("</Amt>",2);
        ExportPlainXml("<CdtrAgt>",2);
        ExportPlainXml("<FinInstnId>",3);
///
	if strlen(Bankr.SWIFT)< 11 then begin
	  banksw = Bankr.SWIFT;
	  rwcnt = (11 - strlen(Bankr.SWIFT));
	  for (i=0;i<rwcnt ;i=i+1 ) begin
	    banksw = banksw & "X";
	  end; // for
	  
	end else begin
	 banksw = Bankr.SWIFT;
	end; // if
	
///
//logtext(0,"Cdtr-banksw = " & banksw);
//	ExportTagXml("BIC",Bankr.SWIFT,4);  
	ExportTagXml("BIC",banksw,4);  

//          ExportTagXml("BIC",Bankr.SWIFT,4);  //Gavejo bankas
        if (nonblank(Bankr.Name)) then begin
          ExportTagXml("Nm",ConvertXmlString(Bankr.Name,false),4);
        end;
        if (nonblank(Bankr.Address0) or nonblank(Bankr.Address1) or nonblank(Bankr.Address2) or nonblank(Bankr.Address3)
           or nonblank(Bankr.CountryCode)) then begin
          ExportPlainXml("<PstlAdr>",4);
          if (nonblank(Bankr.CountryCode)) then begin
            ExportTagXml("Ctry",Bankr.CountryCode,5);
	  end;
	  if (nonblank(Bankr.Address0)) then begin
            ExportTagXml("AdrLine",ConvertXmlString(Bankr.Address0,false),5);
          end;
          if (nonblank(Bankr.Address1)) then begin
            ExportTagXml("AdrLine",ConvertXmlString(Bankr.Address1,false),5);
          end;
          if (nonblank(Bankr.Address2)) then begin
            ExportTagXml("AdrLine",Bankr.Address2,5); 
          end;
          if (nonblank(Bankr.Address3)) then begin
            ExportTagXml("AdrLine",Bankr.Address3,5);
          end;
          ExportPlainXml("</PstlAdr>",4);
        end;
        ExportPlainXml("</FinInstnId>",3);
        ExportPlainXml("</CdtrAgt>",2);
      ExportPlainXml("<Cdtr>",2);
      ExportTagXml("Nm",ConvertXmlString(VEr.Name,false),3);
      if(nonblank(VEr.InvAddr1) and nonblank(VEr.InvAddr2) and nonblank(VEr.CountryCode)) then begin
        ExportPlainXml("<PstlAdr>",3);
        ExportTagXml("Ctry",VEr.CountryCode,4);
	ExportTagXml("AdrLine",ConvertXmlString(VEr.InvAddr1,false),4);  
        ExportTagXml("AdrLine",ConvertXmlString(VEr.InvAddr2,false),4);  
        ExportPlainXml("</PstlAdr>",3);
      end;
/// 16.01.19
  if VEr.EmployeeType == 0 then begin  
  ExportPlainXml("<Id>",3);
  ExportPlainXml("<OrgId>",4);
  ExportPlainXml("<Othr>",5);
  ExportTagXml("Id",ConvertXmlString(VEr.RegNr1,false),6);
  ExportPlainXml("<SchmeNm>",6);
  ExportTagXml("Cd","COID",7);
  ExportPlainXml("</SchmeNm>",6);
  ExportPlainXml("</Othr>",5);
  ExportPlainXml("</OrgId>",4);
  ExportPlainXml("</Id>",3);
  end else begin
  ExportPlainXml("<Id>",3);
  ExportPlainXml("<PrvtId>",4);
  ExportPlainXml("<Othr>",5);
  ExportTagXml("Id",ConvertXmlString(VEr.RegNr1,false),6);
  ExportPlainXml("<SchmeNm>",6);
  ExportTagXml("Cd","NIDN",7);
  ExportPlainXml("</SchmeNm>",6);
  ExportPlainXml("</Othr>",5);
  ExportPlainXml("</PrvtId>",4);
  ExportPlainXml("</Id>",3);
  end; // if

/// end 16.01.19

      ExportPlainXml("</Cdtr>",2);
///----------
      ExportPlainXml("<CdtrAcct>",2);
      ExportPlainXml("<Id>",3);
      if (ValidateIBAN(bankacc)) then begin
        StripSpace(tstr,bankacc);
	ExportTagXml("IBAN",tstr,4);  
      end else begin
        StripSpace(tstr,bankacc);
	ExportTagXml("BBAN",tstr,4);  
      end;
      ExportPlainXml("</Id>",3);
      ExportPlainXml("</CdtrAcct>",2);
///---------------
      ExportPlainXml("<RmtInf>",2);
  if nonblank(OPr.PayNumber) then begin
////
        ExportPlainXml("<Strd>",3);  
        ExportPlainXml("<CdtrRefInf>",4);
        ExportPlainXml("<Tp>",5);
        ExportPlainXml("<CdOrPrtry>",6);
        ExportTagXml("Cd","SCOR",7);    
        ExportPlainXml("</CdOrPrtry>",6);
        ExportPlainXml("</Tp>",5);
        ExportTagXml("Ref",OPr.PayNumber,5);    
        ExportPlainXml("</CdtrRefInf>",4);
        ExportPlainXml("</Strd>",3);  
////
  end else begin  
////++++
  rwcnt = MatRowCnt(OPr);
  tstr = "";
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      If (OPrw.ovst!=0) or (OPrw.stp!=1) Then Begin
        goto LBankExpLitSEPA_Domestic_SKIPROW3;      
      end;
      rtst = OPrw.Comment;
      DupQuatMarks(rtst ,rtst);
         if nonblank(rtst) then begin
	   tstr = tstr & " " & rtst;
         end; // if             
LBankExpLitSEPA_Domestic_SKIPROW3:;
    end; // for
//    if (BytesInString(tstr) > strlen(tstr)) then begin
VIr.SerNr = OPrw.VISerNr;
If ReadFirstMain(VIr,1,true) then begin
tstr = VIr.InvoiceNr;
end;
    if (strlen(tstr) > 139) then begin
      ExportTagXml("Ustrd",Left(tstr,139),3);    
    end else begin
      ExportTagXml("Ustrd",tstr,3);    
    end;
  end; // if Nuoroda or Comment

////+++

//logtext(0,"strlen(tstr) = " & strlen(tstr) & "**tstr = " & tstr);
      ExportPlainXml("</RmtInf>",2);    
      
      ExportPlainXml("</CdtTrfTxInf>",1);
///*********
  BankExpLitSEPA_Domestic_Footer;
  return;
end;
